#!/usr/bin/env bash

# General
alias py='ipython3'
alias python36='~/.virtualenvs/v3.6/bin/python3'
alias python36_sudo='sudo ~/.virtualenvs/v3.6/bin/python3'
alias rust_evcxr='evcxr'
alias unzip='unzip -q'
#alias open='open_command'
alias upgrades='sudo apt update && sudo apt upgrade -y'
alias o='exit'
alias tm='gio trash'
alias mntjet='sshfs nvidia@tx2_rv:/home/nvidia/ /home/seth/kbcar_home'
alias umntjet='fusermount -u /home/seth/kbcar_home'
alias unreal='~/dev/UnrealEngine/Engine/Binaries/Linux/UE4Editor'
alias scaedm='ssh smn45@ssh.et.byu.edu'
alias nuke='pkill -SIGKILL -fe '
alias diff='diff --color'
alias htop_='htop'
alias htop='htop -u seth'
alias lsblk_='lsblk -o NAME,FSTYPE,SIZE,STATE,TYPE,MOUNTPOINT |grep -v loop'
alias df_='df -h |grep -v loop'
alias kill_holodeck='killall Holodeck && killall Holodeck'
alias msger='fb-messenger-cli'
alias watch_='watch -n 0.2 '
alias nv='nvidia-smi'
alias ssh_desktop='ssh desktop'
alias remarkable='reMarkable'
alias blender='~/.local/share/blender/blender'
alias bim='vim'
alias chmod_rm_green_highlight='chmod -R a-x,o-w,+X'
zath() {
  tabbed -cd zathura $1 -e
}
upload_gdrive() { # upload file to Sync dir on Google Drive
  gdrive upload -p 0B0rj1VEWGIltcmJ1UGNIQTVfTmc $1
}

# exa
alias x='exa'

# ls aliases - in order from most to least comfortable
alias l='ls -1'
alias lh='l -A'
alias lk='l --group-directories-first'
alias lsk='ls --group-directories-first'
alias ll='ls -lhgG'
alias llk='ll --group-directories-first'
alias lla='ls -l'
alias la='ls -lAh'
alias lak='ls -lAh --group-directories-first'

alias count_files='find . ! -name . -prune -type f -print | grep -c /'
alias count_files_recurse='find .//. ! -name . -print -type f | grep -c /'

lg() {
  la | grep $1
}
lsg() {
  ls | grep $1
}
sizes() {
  sudo find . -mindepth 1 -maxdepth 1 -print0 | xargs -0 du -hsc | sort -hr
}
power_draw() {
  echo - | awk "{printf \"%.1f\", \
      $(($(cat /sys/class/power_supply/BAT0/current_now) * $(cat /sys/class/power_supply/BAT0/voltage_now))) / 1000000000000 }"
  echo " W "
}

# ranger file manager
ranger-cd() {
    tempfile="$(mktemp -t tmp.XXXXXX)"
    /usr/local/bin/ranger --choosedir="$tempfile" "${@:-$(pwd)}"
    test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
        cd -- "$(cat "$tempfile")"
    fi  
    rm -f -- "$tempfile"
}

alias ra='ranger-cd'
bindkey -s '^O' 'ranger-cd\n'

# Copying with progress/speed info
alias rp='rsync -ah --no-owner'
alias rpprog='rsync -ah --no-owner --progress'

alias sudo_rp='sudo rsync -ah --no-owner'
alias sudo_rpprog='sudo rsync -ah --no-owner --progress'
alias rsync_ssh='rsync -ahzP "$@"'
#rsync_ssh() {
  #if [[ $1 == "--delete" || $1 == "-d" ]]; then
    #dir=$2
    #ops="--delete"
  #elif [[ -d $1 ]]; then
    #dir=$1
    #ops=""
  #else 
    #echo "oops, that didn't work"
    #return 1
  #fi
#}
#rsync_to_remote() {
  #rsync_ssh "$@"

  #if [[ $(uname -n) == "seth-xps-13" ]]; then
    #rsync -ahzP $ops  "$(readlink -f $dir)/" desktop:$(readlink -f $dir) 
  #elif [[ $(uname -n) == "seth-tower-3620" ]]; then
    #rsync -ahzP $ops "$(readlink -f $dir)/" xps-edu:$(readlink -f $dir) 
  #fi
#}
#rsync_from_remote() {
  #rsync_ssh "$@"

  #if [[ $(uname -n) == "seth-xps-13" ]]; then
    #rsync -ahzP $ops  desktop:$(readlink -f $dir) "$(readlink -f $dir)/" 
  #elif [[ $(uname -n) == "seth-tower-3620" ]]; then
    #rsync -ahzP $ops  xps-edu:$(readlink -f $dir) "$(readlink -f $dir)/" 
  #fi
#}

#rsync_ssh_school() {
  #if [[ $(uname -n) == "seth-xps-13" ]]; then
    #rsync -ahzP ~/Documents/School-Optimization/ desktop:~/Documents/School-Optimization
    #rsync -ahzP ~/Documents/School-Nonlinear/ desktop:~/Documents/School-Nonlinear
    #rsync -ahzP desktop:~/Documents/School-Optimization/ ~/Documents/School-Optimization
    #rsync -ahzP desktop:~/Documents/School-Nonlinear/ ~/Documents/School-Nonlinear
  #elif [[ $(uname -n) == "seth-tower-3620" ]]; then
    #rsync -ahzP ~/Documents/School-Nonlinear/ xps-edu:~/Documents/School-Nonlinear
    #rsync -ahzP ~/Documents/School-Optimization/ xps-edu:~/Documents/School-Optimization
    #rsync -ahzP xps-edu:~/Documents/School-Nonlinear/ ~/Documents/School-Nonlinear
    #rsync -ahzP xps-edu:~/Documents/School-Optimization/ ~/Documents/School-Optimization
  #fi
#}

# Move/Copy and follow
goto() { [ -d "$1" ] && cd "$1" || cd "$(dirname "$1")"; }
cpf() { cp "$@" && goto "$_"; }
mvf() { mv "$@" && goto "$_"; }

# cd and ls
cdl() {cd "$@" && ls}
cdll() {cd "$@" && ll}

#alias cd='cdls'

# zsh / sourcing / environment
alias vz='vim ~/.zshrc'
alias va='vim ~/.aliasrc'
alias vv='vim ~/.vimrc'
alias szsh='source ~/.zshrc'
alias sdev='source devel/setup.zsh'
alias sros='source /opt/ros/melodic/setup.zsh'
alias source_remarkable='unset LD_LIBRARY_PATH && source /usr/local/oecore-x86_64/environment-setup-cortexa9hf-neon-oe-linux-gnueabi'
alias path='sed "s/:/\n/g" <<< "$PATH"'
alias path_python='sed "s/:/\n/g" <<< "$PYTHONPATH"'
path_python_sys() {
  echo $(echo "import sys; print(sys.path)") | python | sed "s/', '/\n/g" | cut -d'[' -f 1 | cut -d']' -f 1
}

# ROS/Catkin
alias ros_env='env | grep ROS'
alias catkin_make_cuda='catkin_make -DOpenCV_DIR=/usr/local/share/OpenCV -DVISUAL_MTT_CUDA=ON'
alias catkin_make_py36='catkin_make -DPYTHON_EXECUTABLE=~/.virtualenvs/v3.6/bin/python3'
alias catkin_make_py36_debug='catkin_make_py36 -DCMAKE_BUILD_TYPE=Debug'
alias catkin_make_py36_release='catkin_make_py36 -DCMAKE_BUILD_TYPE=Release'
alias explode='rm -rf build devel && catkin_make_py36 && source devel/setup.zsh'
alias nodeprocess_edit='sudo vim /opt/ros/melodic/lib/python2.7/dist-packages/roslaunch/nodeprocess.py'

# Handy code-related aliases
alias OptView='python3 ~/dev/pyoptsparse/postprocessing/OptView.py'
alias opencv-docs='google-chrome ~/Documents/opencv-docs-4.0.1/pages.html'
alias rf_holodeck='roslaunch rosflight_holodeck roscopter.launch'
alias rf_holodeck_debug='roslaunch rosflight_holodeck debug.launch'
alias serv_call='rosservice call /param_set MIXER 2 && rosservice call /calibrate_imu'
alias cdb='code ~/dev/boat_landing_sim'
alias cdm='code ~/dev/models/research/deeplab'
alias cdh='code ~/dev/boat_landing_sim/src/rosflight_holodeck/python/holodeck'

code2pdf() { for var in "$@"; do vim "$var" -c ":hardcopy > temp.ps" -c ":q";
    ps2pdf temp.ps "${var%.*}".pdf; rm temp.ps; done; }

# Common directories
alias cd_rfh='cd ~/dev/boat_landing_sim/src/rosflight_holodeck'
alias cd_boat='cd ~/dev/boat_landing_sim'
alias cd_holodeck='cd ~/dev/boat_landing_sim/src/rosflight_holodeck/python/holodeck'
alias cd_models='cd ~/dev/models/research/deeplab'
alias cd_holodeck_worlds='cd ~/.local/share/holodeck/0.3.0/worlds'
alias cd_holodeck_worlds-0.2.2='cd ~/.local/share/holodeck-0.2.2dev/0.2.2dev/worlds'

# Print the 256 color test pattern
print256colors() {
  for i in {0..255} ; do
    printf "\x1b[48;5;%sm%3d\e[0m " "$i" "$i"
    if (( i == 15 )) || (( i > 15 )) && (( (i-15) % 6 == 0 )); then
        printf "\n";
    fi
  done  
}

# FFMPEG converting MP4 or MOV to MOV for Resolve video editor
ffmpeg_mp4_to_mov_resolve() {
  if [[ "$#" -ne 1 ]]; then
    echo "Usage: $0 [dir]"
  elif ! [[ -e $1 ]]; then
    echo "$1 does not exist"
  else
    if [[ -d $1 ]]; then
      if [[ "${1: -1}" == "/" ]]; then
        FILES=${1}*
      else
        FILES=${1}/*
      fi
      CONV_DIR=${FILES:0:-2}/converted_resolve
      if [[ -e $CONV_DIR ]]; then
        echo "Error: directory for converted files already exists!"
        return 1
      fi
      mkdir $CONV_DIR
      for f in $~FILES; do
        echo "\n\n ------- Converting file $f -------\n\n"
        if [[ -f $f ]]; then
          fname=${f:2:-4}     \
          fps=$(ffmpeg -i ${f} 2>&1 | sed -n "s/.*, \(.*\) fp.*/\1/p")
                              \
          ffmpeg -i ${f}      \
            -vcodec dnxhd     \
            -acodec pcm_s16le \
            -s 1920x1080      \
            -r $fps           \
            -b:v 45M          \
            -pix_fmt yuv422p  \
            -f mov            \
            "${CONV_DIR}/${fname}_R.MOV"
        fi
      done
    fi
  fi
}
ffmpeg_mov_to_mp4_resolve() {
  if [[ "$#" -ne 1 ]]; then
    echo "Usage: $0 [infile.mov]"
  elif ! [[ -e $1 ]]; then
    echo "$1 does not exist"
  else
    fname=${${1:0:-}}   \

    ffmpeg -i ${1}      \
    -vf yadif           \
    -codec:v libx264    \
    -crf 1              \
    -bf 2               \
    -flags +cgop        \
    -pix_fmt yuv420p    \
    -codec:a aac        \
    -strict -2          \
    -b:a 128k           \
    -r:a 48000          \
    -movflags faststart \
    ${fname}.MP4
  fi
}

# git
alias gs='git status'
alias gch='git checkout'
alias gcm='git commit -m'
alias subup='git submodule update --init --recursive'

dir1=~/env
dir2=~/school/nonlinear
dir3=~/school/optimization
dir4=~/school

name1=$(echo $(echo "print('$dir1'.upper())"| python) | cut -d'/' -f 4)
name2=$(echo $dir2 | cut -d'/' -f 5)
name3=$(echo $dir3 | cut -d'/' -f 5)
name4=$(echo $(echo "print('$dir4'.upper())"| python) | cut -d'/' -f 4)

alias cd_nonlinear='cd $dir2'
alias cd_optimization='cd $dir3'
alias cdn='code $dir2'
alias cdo='code $dir3'

pull_changes() {
  A=$(pwd)
  cd $dir1
  git pull
  cd $dir2
  git pull
  cd $dir3
  git pull
  cd $dir4
  git pull
  cd $A
  echo "\npersonal repos have been updated on this machine.\n"
}
push_changes() {
  A=$(pwd)
  echo "\n--$name1--"
  cd $dir1
  git add -A
  git commit -m "Auto-pushed changes"
  git push
  echo "\n--$name2--"
  cd $dir2
  git add -A
  git commit -m "Auto-pushed changes"
  git push
  echo "\n--$name3--"
  cd $dir3
  git add -A
  git commit -m "Auto-pushed changes"
  git push
  echo "\n--$name4--"
  cd $dir4
  git add -A
  git commit -m "Auto-pushed changes"
  git push
  echo "\n"
  cd $A
}
gstats() {
  A=$(pwd)
  echo "\n--$name1--"
  cd $dir1
  git status -s
  echo "--$name4--"
  cd $dir4
  git status -s
  echo " -- $name2 --"
  cd $dir2
  git status -s
  echo " -- $name3 --"
  cd $dir3
  git status -s
  echo ""
  cd $A
}
boat_pull() {
  A=$(pwd)
  echo "\n--rosflight_holodeck--"
  cd ~/dev/boat_landing_sim/src/rosflight_holodeck
  git pull
  echo "\n--rosflight--"
  cd ../ROSFLIGHT_fork
  git pull
  echo "\n--rosflight_joy--"
  cd ../rf_joy
  git pull
  echo "\n--roscopter--"
  cd ../roscopter
  git pull
  echo "\n--boat_landing_sim--"
  cd ../..
  git pull
  cd $A
  echo "\nboat_landing_sim repo has been updated on this machine.\n"
}
bstats() {
  A=$(pwd)
  echo "\n--rosflight_holodeck--"
  cd ~/dev/boat_landing_sim/src/rosflight_holodeck
  git status -s
  echo "\n--rosflight--"
  cd ~/dev/boat_landing_sim/src/ROSFLIGHT_fork
  git status -s
  echo "    --firmware--"
  cd ~/dev/boat_landing_sim/src/ROSFLIGHT_fork/rosflight_firmware/firmware
  git status -s
  echo "\n--rosflight_joy--"
  cd ~/dev/boat_landing_sim/src/rf_joy
  git status -s
  echo "\n--roscopter--"
  cd ~/dev/boat_landing_sim/src/roscopter
  git status -s
  cd $A
  echo "\n"
}

source ~/.other
